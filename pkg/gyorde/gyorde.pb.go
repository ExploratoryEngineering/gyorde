// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gyorde.proto

package gyorde

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Attribute_Type int32

const (
	Attribute_IMEISV           Attribute_Type = 0
	Attribute_CELLID           Attribute_Type = 1
	Attribute_USERLOCATIONINFO Attribute_Type = 2
)

var Attribute_Type_name = map[int32]string{
	0: "IMEISV",
	1: "CELLID",
	2: "USERLOCATIONINFO",
}

var Attribute_Type_value = map[string]int32{
	"IMEISV":           0,
	"CELLID":           1,
	"USERLOCATIONINFO": 2,
}

func (x Attribute_Type) String() string {
	return proto.EnumName(Attribute_Type_name, int32(x))
}

func (Attribute_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cda3b0c3b51f8d19, []int{0, 0}
}

type CheckDeviceRequest_IPType int32

const (
	CheckDeviceRequest_IPV4 CheckDeviceRequest_IPType = 0
	CheckDeviceRequest_IPV6 CheckDeviceRequest_IPType = 1
)

var CheckDeviceRequest_IPType_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
}

var CheckDeviceRequest_IPType_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
}

func (x CheckDeviceRequest_IPType) String() string {
	return proto.EnumName(CheckDeviceRequest_IPType_name, int32(x))
}

func (CheckDeviceRequest_IPType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cda3b0c3b51f8d19, []int{1, 0}
}

// Attribute is metadata on the device. These attributes aren't required for
// anything but information purposes. The cell ID attribute is particularly
// useful if you want to avoid spamming the base stations when there's lots
// of devices in the same area that gets firmware updates or messages.
type Attribute struct {
	Type                 Attribute_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gyorde.Attribute_Type" json:"type,omitempty"`
	Value                []byte         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Attribute) Reset()         { *m = Attribute{} }
func (m *Attribute) String() string { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()    {}
func (*Attribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda3b0c3b51f8d19, []int{0}
}

func (m *Attribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attribute.Unmarshal(m, b)
}
func (m *Attribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attribute.Marshal(b, m, deterministic)
}
func (m *Attribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attribute.Merge(m, src)
}
func (m *Attribute) XXX_Size() int {
	return xxx_messageInfo_Attribute.Size(m)
}
func (m *Attribute) XXX_DiscardUnknown() {
	xxx_messageInfo_Attribute.DiscardUnknown(m)
}

var xxx_messageInfo_Attribute proto.InternalMessageInfo

func (m *Attribute) GetType() Attribute_Type {
	if m != nil {
		return m.Type
	}
	return Attribute_IMEISV
}

func (m *Attribute) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// CheckDeviceRequest contains information on the device connecting to Horde.
// Both IMSI and, address type and address are required fields.
type CheckDeviceRequest struct {
	Imsi                 int64                     `protobuf:"varint,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	IpType               CheckDeviceRequest_IPType `protobuf:"varint,2,opt,name=ipType,proto3,enum=gyorde.CheckDeviceRequest_IPType" json:"ipType,omitempty"`
	IpAddress            []byte                    `protobuf:"bytes,3,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Attributes           []*Attribute              `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CheckDeviceRequest) Reset()         { *m = CheckDeviceRequest{} }
func (m *CheckDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*CheckDeviceRequest) ProtoMessage()    {}
func (*CheckDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda3b0c3b51f8d19, []int{1}
}

func (m *CheckDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckDeviceRequest.Unmarshal(m, b)
}
func (m *CheckDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckDeviceRequest.Marshal(b, m, deterministic)
}
func (m *CheckDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckDeviceRequest.Merge(m, src)
}
func (m *CheckDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_CheckDeviceRequest.Size(m)
}
func (m *CheckDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckDeviceRequest proto.InternalMessageInfo

func (m *CheckDeviceRequest) GetImsi() int64 {
	if m != nil {
		return m.Imsi
	}
	return 0
}

func (m *CheckDeviceRequest) GetIpType() CheckDeviceRequest_IPType {
	if m != nil {
		return m.IpType
	}
	return CheckDeviceRequest_IPV4
}

func (m *CheckDeviceRequest) GetIpAddress() []byte {
	if m != nil {
		return m.IpAddress
	}
	return nil
}

func (m *CheckDeviceRequest) GetAttributes() []*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// CheckDeviceResponse is the response sent from Horde to the client when a
// device is checked. If the device is accepted the success field is set to true.
type CheckDeviceResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckDeviceResponse) Reset()         { *m = CheckDeviceResponse{} }
func (m *CheckDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*CheckDeviceResponse) ProtoMessage()    {}
func (*CheckDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cda3b0c3b51f8d19, []int{2}
}

func (m *CheckDeviceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckDeviceResponse.Unmarshal(m, b)
}
func (m *CheckDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckDeviceResponse.Marshal(b, m, deterministic)
}
func (m *CheckDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckDeviceResponse.Merge(m, src)
}
func (m *CheckDeviceResponse) XXX_Size() int {
	return xxx_messageInfo_CheckDeviceResponse.Size(m)
}
func (m *CheckDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckDeviceResponse proto.InternalMessageInfo

func (m *CheckDeviceResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CheckDeviceResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("gyorde.Attribute_Type", Attribute_Type_name, Attribute_Type_value)
	proto.RegisterEnum("gyorde.CheckDeviceRequest_IPType", CheckDeviceRequest_IPType_name, CheckDeviceRequest_IPType_value)
	proto.RegisterType((*Attribute)(nil), "gyorde.Attribute")
	proto.RegisterType((*CheckDeviceRequest)(nil), "gyorde.CheckDeviceRequest")
	proto.RegisterType((*CheckDeviceResponse)(nil), "gyorde.CheckDeviceResponse")
}

func init() { proto.RegisterFile("gyorde.proto", fileDescriptor_cda3b0c3b51f8d19) }

var fileDescriptor_cda3b0c3b51f8d19 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x5b, 0x6b, 0xea, 0x40,
	0x10, 0xc7, 0x5d, 0xcd, 0xc9, 0xd1, 0x51, 0x0e, 0x39, 0x53, 0x29, 0xc1, 0xfa, 0x60, 0xf3, 0x24,
	0x7d, 0x08, 0xd4, 0x4a, 0xa1, 0x8f, 0xe2, 0x05, 0x16, 0xbc, 0xb1, 0x5e, 0xde, 0x35, 0x0e, 0x36,
	0xf4, 0x92, 0x74, 0x37, 0x11, 0x7c, 0xee, 0x37, 0xec, 0x27, 0x2a, 0xd9, 0xc4, 0x56, 0xb1, 0x7d,
	0x9b, 0x99, 0xfd, 0xcf, 0xcc, 0xef, 0x3f, 0x2c, 0x54, 0xb6, 0xfb, 0x40, 0x6e, 0xc8, 0x0d, 0x65,
	0x10, 0x05, 0x68, 0xa6, 0x99, 0xf3, 0xce, 0xa0, 0xd4, 0x89, 0x22, 0xe9, 0xaf, 0xe3, 0x88, 0xf0,
	0x06, 0x8c, 0x68, 0x1f, 0x92, 0xcd, 0x1a, 0xac, 0xf9, 0xaf, 0x75, 0xe9, 0x66, 0x2d, 0x5f, 0x02,
	0x77, 0xbe, 0x0f, 0x49, 0x68, 0x0d, 0x56, 0xe1, 0xcf, 0x6e, 0xf5, 0x1c, 0x93, 0x5d, 0x68, 0xb0,
	0x66, 0x45, 0xa4, 0x89, 0xd3, 0x06, 0x23, 0xd1, 0x20, 0x80, 0xc9, 0x47, 0x7d, 0x3e, 0x5b, 0x5a,
	0xb9, 0x24, 0xee, 0xf6, 0x87, 0x43, 0xde, 0xb3, 0x18, 0x56, 0xc1, 0x5a, 0xcc, 0xfa, 0x62, 0x38,
	0xe9, 0x76, 0xe6, 0x7c, 0x32, 0xe6, 0xe3, 0xc1, 0xc4, 0xca, 0x3b, 0x1f, 0x0c, 0xb0, 0xfb, 0x48,
	0xde, 0x53, 0x8f, 0x76, 0xbe, 0x47, 0x82, 0xde, 0x62, 0x52, 0x11, 0x22, 0x18, 0xfe, 0x8b, 0xf2,
	0x35, 0x4e, 0x41, 0xe8, 0x18, 0x1f, 0xc0, 0xf4, 0xc3, 0x64, 0x85, 0x9d, 0xd7, 0x90, 0xd7, 0x07,
	0xc8, 0xf3, 0x7e, 0x97, 0x4f, 0x35, 0x6f, 0xd6, 0x80, 0x75, 0x28, 0xf9, 0x61, 0x67, 0xb3, 0x91,
	0xa4, 0x54, 0x46, 0xfd, 0x5d, 0xc0, 0x5b, 0x80, 0xd5, 0xc1, 0xa7, 0xb2, 0x8d, 0x46, 0xa1, 0x59,
	0x6e, 0xfd, 0x3f, 0xbb, 0x80, 0x38, 0x12, 0x39, 0x75, 0x30, 0xd3, 0x15, 0x58, 0x04, 0x83, 0x4f,
	0x97, 0x6d, 0x2b, 0x97, 0x45, 0xf7, 0x16, 0x73, 0x66, 0x70, 0x71, 0xc2, 0xa4, 0xc2, 0xe0, 0x55,
	0x11, 0xda, 0xf0, 0x57, 0xc5, 0x9e, 0x97, 0x30, 0x24, 0xbe, 0x8a, 0xe2, 0x90, 0xa2, 0x03, 0x15,
	0x92, 0x32, 0x90, 0x23, 0x52, 0x6a, 0xb5, 0x4d, 0x0d, 0x96, 0xc4, 0x49, 0xad, 0xb5, 0x80, 0x72,
	0x3a, 0x4f, 0x8f, 0xc6, 0x01, 0x94, 0x8f, 0x76, 0x60, 0xed, 0xf7, 0x63, 0xd4, 0xae, 0x7e, 0x7c,
	0x4b, 0xa1, 0xd6, 0xa6, 0xfe, 0x15, 0x77, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xcd, 0x48,
	0x09, 0x25, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceCheckClient is the client API for DeviceCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceCheckClient interface {
	// CheckDevice checks if a device is registered in Horde.
	CheckDevice(ctx context.Context, in *CheckDeviceRequest, opts ...grpc.CallOption) (*CheckDeviceResponse, error)
}

type deviceCheckClient struct {
	cc *grpc.ClientConn
}

func NewDeviceCheckClient(cc *grpc.ClientConn) DeviceCheckClient {
	return &deviceCheckClient{cc}
}

func (c *deviceCheckClient) CheckDevice(ctx context.Context, in *CheckDeviceRequest, opts ...grpc.CallOption) (*CheckDeviceResponse, error) {
	out := new(CheckDeviceResponse)
	err := c.cc.Invoke(ctx, "/gyorde.DeviceCheck/CheckDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceCheckServer is the server API for DeviceCheck service.
type DeviceCheckServer interface {
	// CheckDevice checks if a device is registered in Horde.
	CheckDevice(context.Context, *CheckDeviceRequest) (*CheckDeviceResponse, error)
}

func RegisterDeviceCheckServer(s *grpc.Server, srv DeviceCheckServer) {
	s.RegisterService(&_DeviceCheck_serviceDesc, srv)
}

func _DeviceCheck_CheckDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceCheckServer).CheckDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gyorde.DeviceCheck/CheckDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceCheckServer).CheckDevice(ctx, req.(*CheckDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gyorde.DeviceCheck",
	HandlerType: (*DeviceCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckDevice",
			Handler:    _DeviceCheck_CheckDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gyorde.proto",
}
